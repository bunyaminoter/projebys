@page "/personnel/courses/add/{advisorId:int}"
@model projebys.Pages.Personnel.CourseAddModel

<!DOCTYPE html>
<html lang="tr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Ders Ekle</title>
    <link rel="stylesheet" href="/css/CourseAdd.css">
    <script src="/js/CourseAdd.js" defer></script>
</head>
<body>
    <div class="sidebar">
        <div class="logo-container">
            <img src="/img/ktu-logo.png" alt="Logo" class="logo">
        </div>

        <div id="menu">
            <span class="menu-item" onclick="toggleSubMenu('personnelMenu')">Personel İşlemleri</span>
            <div id="personnelMenu" class="sub-menu">
                <span><a href="#" id="updateProfileLink">Profil Güncelle</a></span>
            </div>

            <span class="menu-item" onclick="toggleSubMenu('studentMenu')">Danışman İşlemleri</span>
            <div id="studentMenu" class="sub-menu">
                <span><a href="#" id="myStudentsLink">Öğrencilerim</a></span>
            </div>

            <span class="menu-item" onclick="toggleSubMenu('courseMenu')">Ders İşlemleri</span>
            <div id="courseMenu" class="sub-menu">
                <span><a href="#" id="addCourseLink">Ders Ekle</a></span>
                <span><a href="#" id="updateCourseLink">Ders Güncelle</a></span>
                <span><a href="#" id="listCourseLink">Tüm Dersleri Listele</a></span>
            </div>
        </div>
    </div>

    <div class="course-add-container">
        <h2>Ders Ekle</h2>
        <p>Aşağıdaki formu doldurarak yeni bir ders ekleyebilirsiniz:</p>
        <form id="courseAddForm" method="post">
            <div class="form-group">
                <label for="CourseCode">Ders Kodu:</label>
                <input type="text" id="CourseCode" name="CourseCode" required />
            </div>
            <div class="form-group">
                <label for="CourseName">Ders Adı:</label>
                <input type="text" id="CourseName" name="CourseName" required />
            </div>
            <div class="form-group">
                <label for="Credit">Kredi:</label>
                <input type="number" id="Credit" name="Credit" min="1" max="10" required />
            </div>
            <div class="form-group">
                <label for="IsMandatory">Zorunlu mu?</label>
                <input type="hidden" name="IsMandatory" value="false" />
                <input type="checkbox" id="IsMandatory" name="IsMandatory" value="true" />

            </div>

            <div class="form-group">
                <label for="Department">Bölüm:</label>
                <select id="Department" name="Department" required>
                    <option value="">Bölüm Seçin</option>
                    <option value="Bilgisayar Mühendisliği">Bilgisayar Mühendisliği</option>
                    <option value="Elektrik Mühendisliği">Elektrik Mühendisliği</option>
                    <option value="Makine Mühendisliği">Makine Mühendisliği</option>
                    <option value="Yazılım Mühendisliği">Yazılım Mühendisliği</option>
                    <!-- Diğer bölümler buraya eklenebilir -->
                </select>
            </div>

            <button type="submit">Ders Ekle</button>
        </form>
    </div>
    <script>

                function toggleSubMenu(menuId) {
            // Seçilen alt menüyü bul
            const menu = document.getElementById(menuId);

            // Tüm alt menüleri kapat
            document.querySelectorAll('.sub-menu').forEach(subMenu => {
                if (subMenu !== menu) {
                    subMenu.style.display = 'none';
                }
            });

            // Seçilen alt menüyü aç/kapa
            menu.style.display = menu.style.display === 'block' ? 'none' : 'block';
        }
        function toggleSubMenu(menuId) {
            const menu = document.getElementById(menuId);
            menu.style.display = menu.style.display === 'block' ? 'none' : 'block';
        }

               document.addEventListener('DOMContentLoaded', function () {
            // Kullanıcı bilgilerini yükle (örneğin advisorId için)
            fetch('/api/Advisors/getAdvisorInfo', {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json'
                }
            })
                .then(response => {
                    if (!response.ok) {
                        throw new Error("Danışman bilgileri alınamadı.");
                    }
                    return response.json();
                })
                .then(data => {
                    if (data && data.advisorInfo) {
                        const advisorId = data.advisorInfo.advisorID;

                        // Linkleri dinamik olarak ayarla
                         document.getElementById('updateProfileLink').href = `/personnel/profile/${advisorId}`;
        document.getElementById('myStudentsLink').href = `/personnel/mystudents/${advisorId}`;
        document.getElementById('addCourseLink').href = `/personnel/courses/add/${advisorId}`;
        document.getElementById('updateCourseLink').href = `/personnel/courses/update/${advisorId}`;
        document.getElementById('listCourseLink').href = `/personnel/courses/list/${advisorId}`;

                        // Ders ekleme formu işlemleri
                        const courseAddForm = document.getElementById('courseAddForm');
                        courseAddForm.addEventListener('submit', function (event) {
                            event.preventDefault(); // Formun varsayılan gönderilmesini engelle

                                    const formData = new FormData(courseAddForm);
        const courseData = {};

        // FormData içeriğini nesneye dönüştür
        formData.forEach((value, key) => {
            // IsMandatory alanını boolean'a dönüştür
            if (key === "IsMandatory") {
                courseData[key] = value === "true"; // "true" string'ini boolean'a dönüştür
            } else {
                courseData[key] = value;
            }
        });

        console.log("Gönderilen JSON:", courseData); // Kontrol için logla



                            // API'ye advisorId ile POST isteği gönder
                            fetch(`/api/Course/Add`, {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json'
                                },
                                body: JSON.stringify(courseData)
                            })
                                .then(response => response.json())
                                .then(data => {
                                    if (data.success) {
                                        alert('Ders başarıyla eklendi!');
                                        window.location.href = `/personnel/courses/list`; // Derslerim sayfasına yönlendir
                                    } else {
                                        alert('Ders ekleme sırasında bir hata oluştu!');
                                    }
                                })
                                .catch(error => {
                                    console.error('Hata:', error);
                                    alert('Ders eklerken bir hata oluştu.');
                                });
                        });
                    } else {
                        alert("Danışman bilgileri eksik.");
                    }
                })
                .catch(error => {
                    console.error("Hata:", error);
                    alert("Kullanıcı bilgileri yüklenirken bir hata oluştu.");
                    window.location.href = '/Login/Loginuser'; // Kullanıcı giriş ekranına yönlendirme
                });
        });
    </script>

</body>
</html>
